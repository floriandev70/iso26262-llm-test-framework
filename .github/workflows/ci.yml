name: CI

on:
  push:
  pull_request:

jobs:
  build-and-test:
    name: Build & Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.14

      - name: Configure project
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: cmake --build build --config Release

      - name: Run tests
        run: ctest --test-dir build --output-on-failure

  coverage:
    name: Coverage (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure with coverage flags
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-fprofile-instr-generate -fcoverage-mapping" \
            -DCMAKE_EXE_LINKER_FLAGS="-fprofile-instr-generate -fcoverage-mapping"

      - name: Build with coverage
        run: cmake --build build

      - name: Run tests (continue even if some fail)
        run: ctest --test-dir build --output-on-failure || true
        continue-on-error: true

      - name: Generate coverage report
        if: always()
        run: |
          BIN=$(find build -type f -name "unit_tests" -perm -111 | head -n1)
          if [ -z "$BIN" ]; then BIN=$(find build -type f -name "*tests*" -perm -111 | head -n1); fi
          PROFS=$(find build -name "*.profraw" | tr '\n' ' ')
          if [ -z "$BIN" ] || [ -z "$PROFS" ]; then echo "No coverage data found"; exit 0; fi
          llvm-profdata merge -sparse $PROFS -o build/coverage.profdata
          mkdir -p build/coverage_html
          llvm-cov show "$BIN" \
            -instr-profile=build/coverage.profdata \
            -format=html -output-dir build/coverage_html \
            --ignore-filename-regex="(main.cpp|.*CMakeFiles.*|.*tests?/.*)"

      - name: Upload HTML coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: build/coverage_html
